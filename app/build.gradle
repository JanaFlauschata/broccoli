apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"

def versionMajor = 0
def versionMinor = 7
def versionPatch = 3
def versionBuild = 0

def getBase64EncodedPublicKey() {
    if (project.hasProperty("base64EncodedPublicKey")) {
        return project.getProperty("base64EncodedPublicKey")
    }

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    if (properties.containsKey("base64EncodedPublicKey")) {
        return properties.getProperty("base64EncodedPublicKey")
    }

    throw new InvalidUserDataException("The application's public key (base64EncodedPublicKey) has to be provided either via local.properties or as a parameter.")
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.flauschcode.broccoli"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        buildConfigField "String", "BASE64_ENCODED_PUBLIC_KEY", "\"" + getBase64EncodedPublicKey() + "\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding = true
    }
    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", variant.versionName
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    runtimeOnly group: 'com.google.android.material', name: 'material', version: '1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'id.zelory:compressor:2.1.1' // 3.0.0 does not work with Java

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"

    def fragment_version = "1.3.5"
    implementation "androidx.fragment:fragment:$fragment_version"
    debugImplementation ("androidx.fragment:fragment-testing:$fragment_version"){
        exclude group: 'androidx.test', module : 'core'
    }

    def preference_version = "1.1.1"
    implementation "androidx.preference:preference:$preference_version"

    def billing_version = "4.0.0"
    implementation "com.android.billingclient:billing:$billing_version"

    def dagger_version = "2.35.1"
    implementation group: 'com.google.dagger', name: 'dagger', version: "$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'org.jsoup:jsoup:1.13.1'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.3.0'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'org.mockito:mockito-core:3.3.0'
    androidTestImplementation 'org.mockito:mockito-android:3.3.0'
    androidTestImplementation 'androidx.test:core:1.3.0'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'

    androidTestImplementation "com.google.dagger:dagger:$dagger_version"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"

}

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}